
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.entities;

import com.sharefile.api.SFApiQuery;
import com.sharefile.api.models.SFMetadata;
import com.sharefile.api.models.SFODataFeed;


public class SFMetadataEntity extends SFODataEntityBase
{
    /**
	* Get Metadata by ID
	* Retrieves a single Metadata entry that has a given Name for a given Item.
	* Note:
	* 'GET https://account.sf-api.com/sf/v3/Items(parentid)/Metadata(id)' is unsupported.
	* Current routing doesn't support the URI to retrieve a single Metadata enntry since it is aliased with the GetByItem feed.
	* So for now we support only the same syntax as for AccessControls, i.e. .../Metadata(name=name,itemid=itemid)
	* @param name 	
	* @param itemid 	
	* @return A single Metadata object matching the query
    */
	public SFApiQuery<SFMetadata> get(String name, String itemid)
	{
		SFApiQuery<SFMetadata> query = new SFApiQuery<SFMetadata>();
		query.setFrom("Metadata");
		query.addIds("name", name);
		query.addIds("itemid", itemid);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get Metadata List By Item
	* Retrieves the Metadata List for a given Item.
	* @param id 	
	* @return The Metadata list of the given object ID.
    */
	public SFApiQuery<SFODataFeed<SFMetadata>> getByItem(String id)
	{
		SFApiQuery<SFODataFeed<SFMetadata>> query = new SFApiQuery<SFODataFeed<SFMetadata>>();
		query.setFrom("Items");
		query.setAction("Metadata");
		query.addIds(id);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Create Metadata
    * {
    * "Name":"metadata name",
    * "Value":"metadata value"
    * }
	* Creates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name already exists for this Item.
	* @param id 	
	* @return The created Metadata object
    */
	public SFApiQuery<SFMetadata> createByItem(String id, SFMetadata metadata)
	{
		SFApiQuery<SFMetadata> query = new SFApiQuery<SFMetadata>();
		query.setFrom("Items");
		query.setAction("Metadata");
		query.addIds(id);
		query.setBody(metadata);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Update Metadata
    * {
    * "Value":"metadata value"
    * }
	* Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
	* @param id 	
	* @param metadataId 	
	* @return The updated Metadata object
    */
	public SFApiQuery<SFMetadata> updateByItem(String metadataId, SFMetadata metadata)
	{
		SFApiQuery<SFMetadata> query = new SFApiQuery<SFMetadata>();
		query.setFrom("Items");
		query.setAction("Metadata");
		query.addIds(metadataId);
		query.setBody(metadata);
		query.setHttpMethod("PATCH");
		return query;
	}

    /**
	* Update Metadata
    * {
    * "Value":"metadata value"
    * }
	* Updates a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
	* @param name 	
	* @param itemid 	
	* @return The updated Metadata object
    */
	public SFApiQuery<SFMetadata> update(String name, String itemid, SFMetadata metadata)
	{
		SFApiQuery<SFMetadata> query = new SFApiQuery<SFMetadata>();
		query.setFrom("Metadata");
		query.addIds("name", name);
		query.addIds("itemid", itemid);
		query.setBody(metadata);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Delete Metadata
	* Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
	* @param id 	
	* @param metadataId 	
	* @return (no data)
    */
	public SFApiQuery deleteByItem(String metadataId,  String id )
	{
		SFApiQuery query = new SFApiQuery();
		query.setFrom("Items");
		query.setAction("Metadata");
		query.addIds(metadataId);
		query.addActionIds(id);
		query.setHttpMethod("DELETE");
		return query;
	}

    /**
	* Delete Metadata
	* Deletes a single Metadata entry that has a specified Name for a given Item. Fails if an entry with the given name doesn't exist for this Item.
	* @param name 	
	* @param itemid 	
	* @return (no data)
    */
	public SFApiQuery delete(String name, String itemid)
	{
		SFApiQuery query = new SFApiQuery();
		query.setFrom("Metadata");
		query.addIds("name", name);
		query.addIds("itemid", itemid);
		query.setHttpMethod("DELETE");
		return query;
	}

}

