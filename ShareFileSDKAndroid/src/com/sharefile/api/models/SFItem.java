
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.models;

import java.util.ArrayList;
import java.util.Date;

import com.sharefile.api.enumerations.SFPreviewStatus;

public class SFItem extends SFODataObject {

	private String mName;
	private String mFileName;
	private SFUser mCreator;
	private SFItem mParent;
	private ArrayList<SFAccessControl> mAccessControls;
	private SFZone mZone;
	private Date mCreationDate;
	private Date mProgenyEditDate;
	private Date mExpirationDate;
	private String mDescription;
	private Integer mDiskSpaceLimit;
	private Boolean mIsHidden;
	private Integer mBandwidthLimitInMB;
	private SFUser mOwner;
	private SFAccount mAccount;
	private Integer mFileSizeInKB;
	private SFItem mVirtualParent;
	private String mPath;
	private String mCreatorFirstName;
	private String mCreatorLastName;
	private Integer mExpirationDays;
	private Long mFileSizeBytes;
	private SFPreviewStatus mPreviewStatus;
	private Integer mMaxPreviewSize;
	private Boolean mHasPendingDeletion;
	private String mAssociatedFolderTemplateID;
	private Boolean mIsTemplateOwned;
	private Boolean mHasPermissionInfo;
	private Integer mState;
	private String mStreamID;
	private String mCreatorNameShort;
	private Boolean mHasMultipleVersions;
	private ArrayList<SFMetadata> mMetadata;

		/**
		* Item Name
		*/
	public String getName() {
		return mName;
	}

		/**
		* Item Name
		*/
	public void setName(String name) {
		mName = name;
	}
		/**
		* Item File Name. ShareFile allows Items to have different Display and File names: display
		* names are shown during client navigation, while file names are used when the item is
		* downloaded.
		*/
	public String getFileName() {
		return mFileName;
	}

		/**
		* Item File Name. ShareFile allows Items to have different Display and File names: display
		* names are shown during client navigation, while file names are used when the item is
		* downloaded.
		*/
	public void setFileName(String filename) {
		mFileName = filename;
	}
		/**
		* User that Created this Item
		*/
	public SFUser getCreator() {
		return mCreator;
	}

		/**
		* User that Created this Item
		*/
	public void setCreator(SFUser creator) {
		mCreator = creator;
	}
		/**
		* Parent container of the Item. A container is usually a Folder object, with a few exceptions -
		* the "Account" is the container of top-level folders.
		*/
	public SFItem getParent() {
		return mParent;
	}

		/**
		* Parent container of the Item. A container is usually a Folder object, with a few exceptions -
		* the "Account" is the container of top-level folders.
		*/
	public void setParent(SFItem parent) {
		mParent = parent;
	}
		/**
		* List of Access Controls for this Item. This is not the effective ACL on the Item, just the
		* ACLs directly attached to this Item. Use the "Info" reference to retrieve effective ACL
		*/
	public ArrayList<SFAccessControl> getAccessControls() {
		return mAccessControls;
	}

		/**
		* List of Access Controls for this Item. This is not the effective ACL on the Item, just the
		* ACLs directly attached to this Item. Use the "Info" reference to retrieve effective ACL
		*/
	public void setAccessControls(ArrayList<SFAccessControl> accesscontrols) {
		mAccessControls = accesscontrols;
	}
		/**
		* The Storage Zone that contains this Item.
		*/
	public SFZone getZone() {
		return mZone;
	}

		/**
		* The Storage Zone that contains this Item.
		*/
	public void setZone(SFZone zone) {
		mZone = zone;
	}
		/**
		* Item Creation Date.
		*/
	public Date getCreationDate() {
		return mCreationDate;
	}

		/**
		* Item Creation Date.
		*/
	public void setCreationDate(Date creationdate) {
		mCreationDate = creationdate;
	}
		/**
		* The last modified date of this item and all of its children, recursively. This parameter
		* is not supported in all ShareFile providers - it is always set in sharefile.com hosting, but
		* not in some StorageZone connectors. The Capability object of the provider indicates whether
		* the provider supports this field or not.
		*/
	public Date getProgenyEditDate() {
		return mProgenyEditDate;
	}

		/**
		* The last modified date of this item and all of its children, recursively. This parameter
		* is not supported in all ShareFile providers - it is always set in sharefile.com hosting, but
		* not in some StorageZone connectors. The Capability object of the provider indicates whether
		* the provider supports this field or not.
		*/
	public void setProgenyEditDate(Date progenyeditdate) {
		mProgenyEditDate = progenyeditdate;
	}
		/**
		* Defines the Retention Policy for this Item. After this date, the item is automatically moved
		* to recycle bin.
		*/
	public Date getExpirationDate() {
		return mExpirationDate;
	}

		/**
		* Defines the Retention Policy for this Item. After this date, the item is automatically moved
		* to recycle bin.
		*/
	public void setExpirationDate(Date expirationdate) {
		mExpirationDate = expirationdate;
	}
		/**
		* Item description
		*/
	public String getDescription() {
		return mDescription;
	}

		/**
		* Item description
		*/
	public void setDescription(String description) {
		mDescription = description;
	}
		/**
		* Disk space limit for the Item. Define the maximum amount of bytes that this container can
		* hold at any given time.
		*/
	public Integer getDiskSpaceLimit() {
		return mDiskSpaceLimit;
	}

		/**
		* Disk space limit for the Item. Define the maximum amount of bytes that this container can
		* hold at any given time.
		*/
	public void setDiskSpaceLimit(Integer diskspacelimit) {
		mDiskSpaceLimit = diskspacelimit;
	}
		/**
		* Defines whether the Item has a 'hidden' flag.
		*/
	public Boolean getIsHidden() {
		return mIsHidden;
	}

		/**
		* Defines whether the Item has a 'hidden' flag.
		*/
	public void setIsHidden(Boolean ishidden) {
		mIsHidden = ishidden;
	}
		/**
		* Bandwidth limit for the Item. Define the maximum amount of bytes that can be added and
		* retrieved from this item.
		*/
	public Integer getBandwidthLimitInMB() {
		return mBandwidthLimitInMB;
	}

		/**
		* Bandwidth limit for the Item. Define the maximum amount of bytes that can be added and
		* retrieved from this item.
		*/
	public void setBandwidthLimitInMB(Integer bandwidthlimitinmb) {
		mBandwidthLimitInMB = bandwidthlimitinmb;
	}
		/**
		* User Owner of this Item.
		*/
	public SFUser getOwner() {
		return mOwner;
	}

		/**
		* User Owner of this Item.
		*/
	public void setOwner(SFUser owner) {
		mOwner = owner;
	}
		/**
		* ShareFile Account containing this item.
		*/
	public SFAccount getAccount() {
		return mAccount;
	}

		/**
		* ShareFile Account containing this item.
		*/
	public void setAccount(SFAccount account) {
		mAccount = account;
	}
		/**
		* Item size in Kilobytes. For containers, this field includes all children sizes, recursively.
		*/
	public Integer getFileSizeInKB() {
		return mFileSizeInKB;
	}

		/**
		* Item size in Kilobytes. For containers, this field includes all children sizes, recursively.
		*/
	public void setFileSizeInKB(Integer filesizeinkb) {
		mFileSizeInKB = filesizeinkb;
	}
		/**
		* Defines a Virtual Parent for an Item. In certain conditions, a virtual parent is set to create
		* virtual tree structures different from the strict file system structure - for example, top-level
		* folders may be added under an user's home folder, even though both are defined under the Account.
		*/
	public SFItem getVirtualParent() {
		return mVirtualParent;
	}

		/**
		* Defines a Virtual Parent for an Item. In certain conditions, a virtual parent is set to create
		* virtual tree structures different from the strict file system structure - for example, top-level
		* folders may be added under an user's home folder, even though both are defined under the Account.
		*/
	public void setVirtualParent(SFItem virtualparent) {
		mVirtualParent = virtualparent;
	}
		/**
		* Contains a ItemID path, separated by /, from the virtual root to this given file. Example
		* /accountID/folderID/folderID/itemID
		*/
	public String getPath() {
		return mPath;
	}

		/**
		* Contains a ItemID path, separated by /, from the virtual root to this given file. Example
		* /accountID/folderID/folderID/itemID
		*/
	public void setPath(String path) {
		mPath = path;
	}
		/**
		* First name of the user that created this item
		*/
	public String getCreatorFirstName() {
		return mCreatorFirstName;
	}

		/**
		* First name of the user that created this item
		*/
	public void setCreatorFirstName(String creatorfirstname) {
		mCreatorFirstName = creatorfirstname;
	}
		/**
		* Last name of the user that created this item
		*/
	public String getCreatorLastName() {
		return mCreatorLastName;
	}

		/**
		* Last name of the user that created this item
		*/
	public void setCreatorLastName(String creatorlastname) {
		mCreatorLastName = creatorlastname;
	}
		/**
		* Amount of days until this item expireses (see ExpirationDate)
		*/
	public Integer getExpirationDays() {
		return mExpirationDays;
	}

		/**
		* Amount of days until this item expireses (see ExpirationDate)
		*/
	public void setExpirationDays(Integer expirationdays) {
		mExpirationDays = expirationdays;
	}
		/**
		* Item size in bytes. For containers, this field will include all children sizes, recursively.
		*/
	public Long getFileSizeBytes() {
		return mFileSizeBytes;
	}

		/**
		* Item size in bytes. For containers, this field will include all children sizes, recursively.
		*/
	public void setFileSizeBytes(Long filesizebytes) {
		mFileSizeBytes = filesizebytes;
	}
		/**
		* Indicates whether a preview image is available for this Item.
		* 
		* ShareFile.com always create previews for known file types, although there is a delay from the file
		* creation until the preview is available. Some Storage Zones Providers do not create previews, depending
		* on version and deployment options.
		* 
		* Previews are not created for unknown file types
		*/
	public SFPreviewStatus getPreviewStatus() {
		return mPreviewStatus;
	}

		/**
		* Indicates whether a preview image is available for this Item.
		* 
		* ShareFile.com always create previews for known file types, although there is a delay from the file
		* creation until the preview is available. Some Storage Zones Providers do not create previews, depending
		* on version and deployment options.
		* 
		* Previews are not created for unknown file types
		*/
	public void setPreviewStatus(SFPreviewStatus previewstatus) {
		mPreviewStatus = previewstatus;
	}
	public Integer getMaxPreviewSize() {
		return mMaxPreviewSize;
	}

	public void setMaxPreviewSize(Integer maxpreviewsize) {
		mMaxPreviewSize = maxpreviewsize;
	}
		/**
		* Indicates that the Item is pending for removal. At the next execution of the Cleanup process, the data
		* blob associated with this item will be removed. This parameter is not used for certain Storage Zone
		* Providers. For example, in CIFS and SharePoint connectors, removals are performed imediately. The
		* Capability "HasRecycleBin" indicates whether this field is used or not in the provider.
		*/
	public Boolean getHasPendingDeletion() {
		return mHasPendingDeletion;
	}

		/**
		* Indicates that the Item is pending for removal. At the next execution of the Cleanup process, the data
		* blob associated with this item will be removed. This parameter is not used for certain Storage Zone
		* Providers. For example, in CIFS and SharePoint connectors, removals are performed imediately. The
		* Capability "HasRecycleBin" indicates whether this field is used or not in the provider.
		*/
	public void setHasPendingDeletion(Boolean haspendingdeletion) {
		mHasPendingDeletion = haspendingdeletion;
	}
		/**
		* Folder Template reference. If set, it indicates that this Item was created from a Folder Template. Modifications
		* to the folder template are propagated to the associated items.
		* 
		* The Capability FolderTemplate indicates whether the provider supports Folder Templates.
		*/
	public String getAssociatedFolderTemplateID() {
		return mAssociatedFolderTemplateID;
	}

		/**
		* Folder Template reference. If set, it indicates that this Item was created from a Folder Template. Modifications
		* to the folder template are propagated to the associated items.
		* 
		* The Capability FolderTemplate indicates whether the provider supports Folder Templates.
		*/
	public void setAssociatedFolderTemplateID(String associatedfoldertemplateid) {
		mAssociatedFolderTemplateID = associatedfoldertemplateid;
	}
		/**
		* Indicates whether the item is owned by a Folder Template. If set, it indicates that this Item was created from a
		* Folder Template. Modifications to the folder template are propagated to the associated items.
		* 
		* The Capability FolderTemplate indicates whether the provider supports Folder Templates.
		*/
	public Boolean getIsTemplateOwned() {
		return mIsTemplateOwned;
	}

		/**
		* Indicates whether the item is owned by a Folder Template. If set, it indicates that this Item was created from a
		* Folder Template. Modifications to the folder template are propagated to the associated items.
		* 
		* The Capability FolderTemplate indicates whether the provider supports Folder Templates.
		*/
	public void setIsTemplateOwned(Boolean istemplateowned) {
		mIsTemplateOwned = istemplateowned;
	}
	public Boolean getHasPermissionInfo() {
		return mHasPermissionInfo;
	}

	public void setHasPermissionInfo(Boolean haspermissioninfo) {
		mHasPermissionInfo = haspermissioninfo;
	}
	public Integer getState() {
		return mState;
	}

	public void setState(Integer state) {
		mState = state;
	}
		/**
		* Identifier for the Item stream. An Item represents a single version of a file system object. The stream identifies
		* all versions of the same file system object. For example, when users upload or modify an existing file, a new Item
		* is created with the same StreamID. All Item enumerations return only the latest version of a given stream. You can
		* access the previous versions of a file using the StreamID reference.
		*/
	public String getStreamID() {
		return mStreamID;
	}

		/**
		* Identifier for the Item stream. An Item represents a single version of a file system object. The stream identifies
		* all versions of the same file system object. For example, when users upload or modify an existing file, a new Item
		* is created with the same StreamID. All Item enumerations return only the latest version of a given stream. You can
		* access the previous versions of a file using the StreamID reference.
		*/
	public void setStreamID(String streamid) {
		mStreamID = streamid;
	}
		/**
		* Short version of items creator's name. E.g., J. Doe.
		*/
	public String getCreatorNameShort() {
		return mCreatorNameShort;
	}

		/**
		* Short version of items creator's name. E.g., J. Doe.
		*/
	public void setCreatorNameShort(String creatornameshort) {
		mCreatorNameShort = creatornameshort;
	}
		/**
		* Specifies whether there are other versions of this item. Not all providers support file versioning. The
		* Capability FileVersioning indicates whether the provider supports file versions.
		*/
	public Boolean getHasMultipleVersions() {
		return mHasMultipleVersions;
	}

		/**
		* Specifies whether there are other versions of this item. Not all providers support file versioning. The
		* Capability FileVersioning indicates whether the provider supports file versions.
		*/
	public void setHasMultipleVersions(Boolean hasmultipleversions) {
		mHasMultipleVersions = hasmultipleversions;
	}
		/**
		* List of custom metadata object associated with this item
		*/
	public ArrayList<SFMetadata> getMetadata() {
		return mMetadata;
	}

		/**
		* List of custom metadata object associated with this item
		*/
	public void setMetadata(ArrayList<SFMetadata> metadata) {
		mMetadata = metadata;
	}
}