
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.entities;

import com.sharefile.api.SFApiQuery;
import com.sharefile.api.models.SFAsyncOperation;
import com.sharefile.api.models.SFODataFeed;




public class SFAsyncOperationsEntity extends SFODataEntityBase
{
    /**
	* Get AsyncOperation by ID
	* Retrieve a single Async Op record by ID
	* @param id 	
	* @return A single Async Operation record
    */
	public SFApiQuery<SFAsyncOperation> get(String id)
	{
		SFApiQuery<SFAsyncOperation> query = new SFApiQuery<SFAsyncOperation>();
		query.setFrom("AsyncOperations");
		query.addIds(id);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get List of AsyncOperations by Operation Batch ID
	* Retrieves all AsyncOperations on the specified batch
	* @param id 	
	* @return A Feed of AsyncOperation objects, containing all items in the specified batch
    */
	public SFApiQuery<SFODataFeed<SFAsyncOperation>> getByBatch(String id)
	{
		SFApiQuery<SFODataFeed<SFAsyncOperation>> query = new SFApiQuery<SFODataFeed<SFAsyncOperation>>();
		query.setFrom("AsyncOperations");
		query.setAction("GetByBatch");
		query.addActionIds(id);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get List of AsyncOperations by Folder
	* Retrieves all AsyncOperations associated with the calling user and the Item ID
	* @param id 	
	* @return A Feed of AsyncOperation objects, containing all pending operations in the specific folder, for the authenticated SDK user
    */
	public SFApiQuery<SFODataFeed<SFAsyncOperation>> getByFolder(String id)
	{
		SFApiQuery<SFODataFeed<SFAsyncOperation>> query = new SFApiQuery<SFODataFeed<SFAsyncOperation>>();
		query.setFrom("AsyncOperations");
		query.setAction("GetByFolder");
		query.addActionIds(id);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Cancel AsyncOperation
	* Cancels a single Async operation record
	* @param id 	
	* @return The modified Async Operation record
    */
	public SFApiQuery<SFAsyncOperation> cancel(String id)
	{
		SFApiQuery<SFAsyncOperation> query = new SFApiQuery<SFAsyncOperation>();
		query.setFrom("AsyncOperations");
		query.setAction("Cancel");
		query.addIds(id);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Delete AsyncOperation
	* Cancels a single Async operation record (same as /Cancel)
	* @param id 	
    */
	public SFApiQuery delete(String id)
	{
		SFApiQuery query = new SFApiQuery();
		query.setFrom("AsyncOperations");
		query.addIds(id);
		query.setHttpMethod("DELETE");
		return query;
	}

    /**
	* Cancel an Operation Batch
	* Cancel an Async Operation batch - all unfinished Async Operation records in that batch
	* will be moved to Cancelled state.
	* @param id 	
	* @return A list of the modified Async Operations in the batch
    */
	public SFApiQuery<SFODataFeed<SFAsyncOperation>> cancelBatch(String id)
	{
		SFApiQuery<SFODataFeed<SFAsyncOperation>> query = new SFApiQuery<SFODataFeed<SFAsyncOperation>>();
		query.setFrom("AsyncOperations");
		query.setAction("CancelBatch");
		query.addActionIds(id);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Changes the state of an AsyncOperation
    * { "State": "..." }
	* Only the State parameter is updated, other fields are ignored
	* @param id 	
	* @param newAsyncOp 	
	* @return The modified Async Operation
    */
	public SFApiQuery<SFAsyncOperation> update(String id, SFAsyncOperation newAsyncOp)
	{
		SFApiQuery<SFAsyncOperation> query = new SFApiQuery<SFAsyncOperation>();
		query.setFrom("AsyncOperations");
		query.addIds(id);
		query.setBody(newAsyncOp);
		query.setHttpMethod("PUT");
		return query;
	}

}

