
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.internal.entities;

import com.sharefile.api.*;
import com.sharefile.api.entities.*;
import com.sharefile.api.models.*;
import com.sharefile.api.internal.models.*;
import com.sharefile.api.SFApiQuery;
import com.sharefile.api.interfaces.ISFQuery;


import java.io.InputStream;
import java.util.ArrayList;
import java.net.URI;
import java.util.Date;
 
import com.google.gson.annotations.SerializedName;
import com.sharefile.api.enumerations.SFSafeEnum;
import com.sharefile.api.enumerations.SFSafeEnumFlags;

public class SFEncryptedEmailsEntityInternal extends SFODataEntityBase
{
	public SFEncryptedEmailsEntityInternal(ISFApiClient client) {
		super(client);
	}

	public ISFQuery<SFEncryptedEmail> get(URI url, String firstName, String lastName, String email, String company) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}
		if (lastName == null) {
			throw new InvalidOrMissingParameterException("lastName");
		}
		if (email == null) {
			throw new InvalidOrMissingParameterException("email");
		}
		if (company == null) {
			throw new InvalidOrMissingParameterException("company");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.addQueryString("lastName", lastName);
		sfApiQuery.addQueryString("email", email);
		sfApiQuery.addQueryString("company", company);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> get(URI url, String firstName, String lastName, String email) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}
		if (lastName == null) {
			throw new InvalidOrMissingParameterException("lastName");
		}
		if (email == null) {
			throw new InvalidOrMissingParameterException("email");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.addQueryString("lastName", lastName);
		sfApiQuery.addQueryString("email", email);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> get(URI url, String firstName, String lastName) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}
		if (lastName == null) {
			throw new InvalidOrMissingParameterException("lastName");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.addQueryString("lastName", lastName);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> get(URI url, String firstName) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> get(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFODataFeed<SFEncryptedEmail>> thread(URI url, String firstName, String lastName, String email, String company) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}
		if (lastName == null) {
			throw new InvalidOrMissingParameterException("lastName");
		}
		if (email == null) {
			throw new InvalidOrMissingParameterException("email");
		}
		if (company == null) {
			throw new InvalidOrMissingParameterException("company");
		}

		SFApiQuery<SFODataFeed<SFEncryptedEmail>> sfApiQuery = new SFApiQuery<SFODataFeed<SFEncryptedEmail>>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Thread");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.addQueryString("lastName", lastName);
		sfApiQuery.addQueryString("email", email);
		sfApiQuery.addQueryString("company", company);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFODataFeed<SFEncryptedEmail>> thread(URI url, String firstName, String lastName, String email) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}
		if (lastName == null) {
			throw new InvalidOrMissingParameterException("lastName");
		}
		if (email == null) {
			throw new InvalidOrMissingParameterException("email");
		}

		SFApiQuery<SFODataFeed<SFEncryptedEmail>> sfApiQuery = new SFApiQuery<SFODataFeed<SFEncryptedEmail>>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Thread");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.addQueryString("lastName", lastName);
		sfApiQuery.addQueryString("email", email);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFODataFeed<SFEncryptedEmail>> thread(URI url, String firstName, String lastName) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}
		if (lastName == null) {
			throw new InvalidOrMissingParameterException("lastName");
		}

		SFApiQuery<SFODataFeed<SFEncryptedEmail>> sfApiQuery = new SFApiQuery<SFODataFeed<SFEncryptedEmail>>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Thread");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.addQueryString("lastName", lastName);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFODataFeed<SFEncryptedEmail>> thread(URI url, String firstName) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (firstName == null) {
			throw new InvalidOrMissingParameterException("firstName");
		}

		SFApiQuery<SFODataFeed<SFEncryptedEmail>> sfApiQuery = new SFApiQuery<SFODataFeed<SFEncryptedEmail>>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Thread");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("firstName", firstName);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFODataFeed<SFEncryptedEmail>> thread(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery<SFODataFeed<SFEncryptedEmail>> sfApiQuery = new SFApiQuery<SFODataFeed<SFEncryptedEmail>>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Thread");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFODataFeed<SFEncryptedEmail>> received()	{

		SFApiQuery<SFODataFeed<SFEncryptedEmail>> sfApiQuery = new SFApiQuery<SFODataFeed<SFEncryptedEmail>>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Received");
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> reply(URI url, SFEncryptedEmailReplyParams encryptedEmailParams) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (encryptedEmailParams == null) {
			throw new InvalidOrMissingParameterException("encryptedEmailParams");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Reply");
		sfApiQuery.addIds(url);
		sfApiQuery.setBody(encryptedEmailParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> replyAll(URI url, SFEncryptedEmailParams encryptedEmailParams) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (encryptedEmailParams == null) {
			throw new InvalidOrMissingParameterException("encryptedEmailParams");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("ReplyAll");
		sfApiQuery.addIds(url);
		sfApiQuery.setBody(encryptedEmailParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFEncryptedEmail> create(SFEncryptedEmailCreateParams encryptedEmailParams) throws InvalidOrMissingParameterException 	{
		if (encryptedEmailParams == null) {
			throw new InvalidOrMissingParameterException("encryptedEmailParams");
		}

		SFApiQuery<SFEncryptedEmail> sfApiQuery = new SFApiQuery<SFEncryptedEmail>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setBody(encryptedEmailParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery send(URI url, SFEncryptedEmailSendParams encryptedEmailSendParams) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (encryptedEmailSendParams == null) {
			throw new InvalidOrMissingParameterException("encryptedEmailSendParams");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Send");
		sfApiQuery.addIds(url);
		sfApiQuery.setBody(encryptedEmailSendParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery complete(URI url, SFEncryptedEmailSendParams encryptedEmailSendParams) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (encryptedEmailSendParams == null) {
			throw new InvalidOrMissingParameterException("encryptedEmailSendParams");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Complete");
		sfApiQuery.addIds(url);
		sfApiQuery.setBody(encryptedEmailSendParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<InputStream> message(URI url, String aliasId, Boolean redirect) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (aliasId == null) {
			throw new InvalidOrMissingParameterException("aliasId");
		}
		if (redirect == null) {
			throw new InvalidOrMissingParameterException("redirect");
		}

		SFQueryStream sfApiQuery = new SFQueryStream(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Message");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("aliasId", aliasId);
		sfApiQuery.addQueryString("redirect", redirect);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<InputStream> message(URI url, String aliasId) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (aliasId == null) {
			throw new InvalidOrMissingParameterException("aliasId");
		}

		SFQueryStream sfApiQuery = new SFQueryStream(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Message");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("aliasId", aliasId);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery<InputStream> message(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFQueryStream sfApiQuery = new SFQueryStream(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Message");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	public ISFQuery delete(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid, Integer threadCount, String responseFormat, Boolean notify, Date clientCreatedDateUTC, Date clientModifiedDateUTC, Integer expirationDays) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}
		if (threadCount == null) {
			throw new InvalidOrMissingParameterException("threadCount");
		}
		if (responseFormat == null) {
			throw new InvalidOrMissingParameterException("responseFormat");
		}
		if (notify == null) {
			throw new InvalidOrMissingParameterException("notify");
		}
		if (clientCreatedDateUTC == null) {
			throw new InvalidOrMissingParameterException("clientCreatedDateUTC");
		}
		if (clientModifiedDateUTC == null) {
			throw new InvalidOrMissingParameterException("clientModifiedDateUTC");
		}
		if (expirationDays == null) {
			throw new InvalidOrMissingParameterException("expirationDays");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.addQueryString("threadCount", threadCount);
		sfApiQuery.addQueryString("responseFormat", responseFormat);
		sfApiQuery.addQueryString("notify", notify);
		sfApiQuery.addQueryString("clientCreatedDateUTC", clientCreatedDateUTC);
		sfApiQuery.addQueryString("clientModifiedDateUTC", clientModifiedDateUTC);
		sfApiQuery.addQueryString("expirationDays", expirationDays);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid, Integer threadCount, String responseFormat, Boolean notify, Date clientCreatedDateUTC, Date clientModifiedDateUTC) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}
		if (threadCount == null) {
			throw new InvalidOrMissingParameterException("threadCount");
		}
		if (responseFormat == null) {
			throw new InvalidOrMissingParameterException("responseFormat");
		}
		if (notify == null) {
			throw new InvalidOrMissingParameterException("notify");
		}
		if (clientCreatedDateUTC == null) {
			throw new InvalidOrMissingParameterException("clientCreatedDateUTC");
		}
		if (clientModifiedDateUTC == null) {
			throw new InvalidOrMissingParameterException("clientModifiedDateUTC");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.addQueryString("threadCount", threadCount);
		sfApiQuery.addQueryString("responseFormat", responseFormat);
		sfApiQuery.addQueryString("notify", notify);
		sfApiQuery.addQueryString("clientCreatedDateUTC", clientCreatedDateUTC);
		sfApiQuery.addQueryString("clientModifiedDateUTC", clientModifiedDateUTC);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid, Integer threadCount, String responseFormat, Boolean notify, Date clientCreatedDateUTC) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}
		if (threadCount == null) {
			throw new InvalidOrMissingParameterException("threadCount");
		}
		if (responseFormat == null) {
			throw new InvalidOrMissingParameterException("responseFormat");
		}
		if (notify == null) {
			throw new InvalidOrMissingParameterException("notify");
		}
		if (clientCreatedDateUTC == null) {
			throw new InvalidOrMissingParameterException("clientCreatedDateUTC");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.addQueryString("threadCount", threadCount);
		sfApiQuery.addQueryString("responseFormat", responseFormat);
		sfApiQuery.addQueryString("notify", notify);
		sfApiQuery.addQueryString("clientCreatedDateUTC", clientCreatedDateUTC);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid, Integer threadCount, String responseFormat, Boolean notify) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}
		if (threadCount == null) {
			throw new InvalidOrMissingParameterException("threadCount");
		}
		if (responseFormat == null) {
			throw new InvalidOrMissingParameterException("responseFormat");
		}
		if (notify == null) {
			throw new InvalidOrMissingParameterException("notify");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.addQueryString("threadCount", threadCount);
		sfApiQuery.addQueryString("responseFormat", responseFormat);
		sfApiQuery.addQueryString("notify", notify);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid, Integer threadCount, String responseFormat) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}
		if (threadCount == null) {
			throw new InvalidOrMissingParameterException("threadCount");
		}
		if (responseFormat == null) {
			throw new InvalidOrMissingParameterException("responseFormat");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.addQueryString("threadCount", threadCount);
		sfApiQuery.addQueryString("responseFormat", responseFormat);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid, Integer threadCount) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}
		if (threadCount == null) {
			throw new InvalidOrMissingParameterException("threadCount");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.addQueryString("threadCount", threadCount);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid, String opid) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}
		if (opid == null) {
			throw new InvalidOrMissingParameterException("opid");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.addQueryString("opid", opid);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend, String sendGuid) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}
		if (sendGuid == null) {
			throw new InvalidOrMissingParameterException("sendGuid");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.addQueryString("sendGuid", sendGuid);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details, Boolean isSend) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}
		if (isSend == null) {
			throw new InvalidOrMissingParameterException("isSend");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.addQueryString("isSend", isSend);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title, String details) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}
		if (details == null) {
			throw new InvalidOrMissingParameterException("details");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.addQueryString("details", details);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite, String title) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}
		if (title == null) {
			throw new InvalidOrMissingParameterException("title");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.addQueryString("title", title);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool, Boolean overwrite) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}
		if (overwrite == null) {
			throw new InvalidOrMissingParameterException("overwrite");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.addQueryString("overwrite", overwrite);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip, String tool) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}
		if (tool == null) {
			throw new InvalidOrMissingParameterException("tool");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.addQueryString("tool", tool);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver, Boolean unzip) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}
		if (unzip == null) {
			throw new InvalidOrMissingParameterException("unzip");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.addQueryString("unzip", unzip);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume, Boolean startOver) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}
		if (startOver == null) {
			throw new InvalidOrMissingParameterException("startOver");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.addQueryString("startOver", startOver);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast, Boolean canResume) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}
		if (canResume == null) {
			throw new InvalidOrMissingParameterException("canResume");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.addQueryString("canResume", canResume);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId, Boolean batchLast) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}
		if (batchLast == null) {
			throw new InvalidOrMissingParameterException("batchLast");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.addQueryString("batchLast", batchLast);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize, String batchId) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}
		if (batchId == null) {
			throw new InvalidOrMissingParameterException("batchId");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.addQueryString("batchId", batchId);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName, Long fileSize) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}
		if (fileSize == null) {
			throw new InvalidOrMissingParameterException("fileSize");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.addQueryString("fileSize", fileSize);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw, String fileName) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}
		if (fileName == null) {
			throw new InvalidOrMissingParameterException("fileName");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.addQueryString("fileName", fileName);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method, Boolean raw) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}
		if (raw == null) {
			throw new InvalidOrMissingParameterException("raw");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.addQueryString("raw", raw);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url, SFSafeEnum<SFUploadMethod> method) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (method == null) {
			throw new InvalidOrMissingParameterException("method");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("method", method);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload2(URI url, SFUploadRequestParams uploadParams, Integer expirationDays) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (uploadParams == null) {
			throw new InvalidOrMissingParameterException("uploadParams");
		}
		if (expirationDays == null) {
			throw new InvalidOrMissingParameterException("expirationDays");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload2");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("expirationDays", expirationDays);
		sfApiQuery.setBody(uploadParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	public ISFQuery<SFUploadSpecification> upload2(URI url, SFUploadRequestParams uploadParams) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (uploadParams == null) {
			throw new InvalidOrMissingParameterException("uploadParams");
		}

		SFApiQuery<SFUploadSpecification> sfApiQuery = new SFApiQuery<SFUploadSpecification>(this.client);
		sfApiQuery.setFrom("EncryptedEmails");
		sfApiQuery.setAction("Upload2");
		sfApiQuery.addIds(url);
		sfApiQuery.setBody(uploadParams);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

}

