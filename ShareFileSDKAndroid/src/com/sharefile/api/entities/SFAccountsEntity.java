
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.entities;

import com.sharefile.api.SFApiQuery;
import com.sharefile.api.SFToDoReminderException;
import com.sharefile.api.models.SFAccessControlDomains;
import com.sharefile.api.models.SFAccount;
import com.sharefile.api.models.SFAccountPreferences;
import com.sharefile.api.models.SFContact;
import com.sharefile.api.models.SFFindSubdomainParams;
import com.sharefile.api.models.SFFindSubdomainResult;
import com.sharefile.api.models.SFMobileSecuritySettings;
import com.sharefile.api.models.SFODataFeed;
import com.sharefile.api.models.SFODataObject;
import com.sharefile.api.models.SFProductDefaults;
import com.sharefile.api.models.SFRequireSubdomainResult;
import com.sharefile.api.models.SFRequireWebPopResult;
import com.sharefile.api.models.SFSSOAccountProvider;
import com.sharefile.api.models.SFSSOInfo;




public class SFAccountsEntity extends SFODataEntityBase
{
    /**
	* Get current Account
	* Retrieves information about the Account defined in the call subdomain
	* @return The subdomain account information
    */
	public SFApiQuery<SFAccount> get()
	{
		SFApiQuery<SFAccount> query = new SFApiQuery<SFAccount>();
		query.setFrom("Accounts");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get current Account branding
	* Retrievs Branding information about the subdomain account.
	* This operation does not require authentication.
	* @return Branding information for a given sharefile account
    */
	public SFApiQuery<SFAccount> getBranding()
	{
		SFApiQuery<SFAccount> query = new SFApiQuery<SFAccount>();
		query.setFrom("Accounts");
		query.setAction("Branding");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get List of current Account Employees
	* Retrives the list of Employees in the Account
	* Employees are named users in the Account.
	* @return A Feed containing all Employees Contacts in the account
    */
	public SFApiQuery<SFODataFeed<SFContact>> getEmployees()
	{
		SFApiQuery<SFODataFeed<SFContact>> query = new SFApiQuery<SFODataFeed<SFContact>>();
		query.setFrom("Accounts");
		query.setAction("Employees");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get List of current Account Clients
	* Retrieves the list of Clients in the Account.
	* Clients are restricted users of an Account, that can receive and send files
	* to Employees, but have no other permissions besides basic sharing with Employees.
	* @return A Feed containing all Clients in the account
    */
	public SFApiQuery<SFODataFeed<SFContact>> getClients()
	{
		SFApiQuery<SFODataFeed<SFContact>> query = new SFApiQuery<SFODataFeed<SFContact>>();
		query.setFrom("Accounts");
		query.setAction("Clients");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get Account AddressBooks
	* Retrieves an address book from the account.
	* Address Books are the contacts of Eployees and Clients, maintained on a personal or
	* account-wide basis (shared).
	* @param type 	
	* @param searchTerm 	
	* @return A Feed of Contact objects representing the Address Book retrieved
    */
	public SFApiQuery<SFODataFeed<SFContact>> getAddressBook(String type , String searchTerm )
	{
		SFApiQuery<SFODataFeed<SFContact>> query = new SFApiQuery<SFODataFeed<SFContact>>();
		query.setFrom("Accounts");
		query.setAction("AddressBook");
		query.addQueryString("type", type);
		query.addQueryString("searchTerm", searchTerm);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get Account Mobile Security Settings
	* Returns the Mobile device configuration settings for this account
	* @return The current mobile security configuration for this account
    */
	public SFApiQuery<SFMobileSecuritySettings> getMobileSecuritySettings()
	{
		SFApiQuery<SFMobileSecuritySettings> query = new SFApiQuery<SFMobileSecuritySettings>();
		query.setFrom("Accounts");
		query.setAction("MobileSecuritySettings");
		query.setHttpMethod("GET");
		return query;
	}

	public SFApiQuery<SFProductDefaults> getProductDefaults()
	{
		SFApiQuery<SFProductDefaults> query = new SFApiQuery<SFProductDefaults>();
		query.setFrom("Accounts");
		query.setAction("ProductDefaults");
		query.setHttpMethod("GET");
		return query;
	}

	public SFApiQuery<SFAccountPreferences> getPreferences()
	{
		SFApiQuery<SFAccountPreferences> query = new SFApiQuery<SFAccountPreferences>();
		query.setFrom("Accounts");
		query.setAction("Preferences");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get Account Single Sign-On Configuration
	* Retrieve the Single Sign-on configuration for the Account
	* @param provider 	
    */
	public SFApiQuery<SFSSOAccountProvider> getSSO(String provider )
	{
		SFApiQuery<SFSSOAccountProvider> query = new SFApiQuery<SFSSOAccountProvider>();
		query.setFrom("Accounts");
		query.setAction("SSO");
		query.addQueryString("provider", provider);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Update Account Single Sign-On Configuration
    * {
    * "LogoutUrl":"",
    * "LoginUrl":"https://idp.com/signin",
    * "IPRestrictions":"+all",
    * "ForceSSO":true,
    * "EntityID":"http://account.sf-api.com/saml/info",
    * "SFEntityID":"http://idp.com/saml/info",
    * "SPInitatedAuthContext":"exact",
    * "SPInitatedAuthMethod":"urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
    * }
	* Modifies the Single Sign-on Configuration for this account.
	* @param sso 	
	* @param provider 	
    */
	public SFApiQuery<SFSSOAccountProvider> updateSSO(SFSSOAccountProvider sso, String provider)
	{
		SFApiQuery<SFSSOAccountProvider> query = new SFApiQuery<SFSSOAccountProvider>();
		query.setFrom("Accounts");
		query.setAction("SSO");
		query.addQueryString("provider", provider);
		query.setBody(sso);
		query.setHttpMethod("PATCH");
		return query;
	}

    /**
	* Email List of Accounts to User
    * {
    * "password":"password"
    * }
	* Retrieve the list of Accounts associated with a given user
	* All parameters to this call may be passed in the Post body as root JSON parameters, or in the URI -
	* with the exception of password that must be provided in the POST body.
	* This operation does not require authentication
	* @param username 	
	* @param password 	
	* @param employeesonly 	
	* @param requirehomefolders 	
	* @return The list of Accounts associated with this username/password.
    */
	public SFApiQuery<SFODataFeed<SFAccount>> getByUser(SFODataObject parameters)
	{
		SFApiQuery<SFODataFeed<SFAccount>> query = new SFApiQuery<SFODataFeed<SFAccount>>();
		query.setFrom("Accounts");
		query.setAction("GetByUser");
		/*
		parameters.Properties["username"] = username;
		parameters.Properties["employeesonly"] = employeesonly;
		parameters.Properties["requirehomefolders"] = requirehomefolders;
		*/
		SFToDoReminderException.throwTODOException("handle parameter filing here");
		query.setBody(parameters);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Email List of Accounts to User
	* Sends the list of accounts to the specified email address
	* This operation does not require authentication
	* @param email 	
    */
	public SFApiQuery sendToEmail(String email)
	{
		SFApiQuery query = new SFApiQuery();
		query.setFrom("Accounts");
		query.setAction("SendToEmail");
		query.addQueryString("email", email);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Get the Login Access Control List of domains
	* Retrieve the list of domains that are allowed or disallowed to login.
	* Whether the list is an allow or disallow list
	* is configured by the AccessControlType property. The domain names are checked against the domains of all the
	* email addresses of the user that attempts to log in to the Account.
	* @return The Login Access Control List of domains for the Account.
    */
	public SFApiQuery<SFAccessControlDomains> getLoginAccessControlDomains()
	{
		SFApiQuery<SFAccessControlDomains> query = new SFApiQuery<SFAccessControlDomains>();
		query.setFrom("Accounts");
		query.setAction("LoginAccessControlDomains");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Get the Folder Access Control List of domains
	* Retrieve the list of domains that are allowed or disallowed to have access to folders. Whether the list is an allow or disallow list
	* is configured by the AccessControlType property.
	* 
	* The list blocks user access to folders by preventing adding a user to distribution groups or folders.
	* The domain names are checked against the domains of all the email addresses of the user.
	* This is an account-wide setting.
	* @return The Folder Access Control List of domains for the Account, e.g.  { "AccessControlType" : "AllowedDomains", "Domains": ["domainA", "domainB", ...] }
    */
	public SFApiQuery<SFAccessControlDomains> getFolderAccessControlDomains()
	{
		SFApiQuery<SFAccessControlDomains> query = new SFApiQuery<SFAccessControlDomains>();
		query.setFrom("Accounts");
		query.setAction("FolderAccessControlDomains");
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Create or replace the Login Access Control List of domains
    * {
    * "AccessControlType" : "AllowedDomains",
    * "Domains": ["domainA", "domainB", ...]
    * }
	* @param AccessControlType 	
	* @param Domains 	
	* @return The new Login Access Control List of domains for the Account
    */
	public SFApiQuery<SFAccessControlDomains> createLoginAccessControlDomains(SFAccessControlDomains accessControlDomains)
	{
		SFApiQuery<SFAccessControlDomains> query = new SFApiQuery<SFAccessControlDomains>();
		query.setFrom("Accounts");
		query.setAction("LoginAccessControlDomains");
		query.setBody(accessControlDomains);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Create or replace the Folder Access Control List of domains
    * {
    * "AccessControlType" : "AllowedDomains",
    * "Domains": ["domainA", "domainB", ...]
    * }
	* @param AccessControlType 	
	* @param Domains 	
	* @return The new Folder Access Control List of domains for the Account
    */
	public SFApiQuery<SFAccessControlDomains> createFolderAccessControlDomains(SFAccessControlDomains accessControlDomains)
	{
		SFApiQuery<SFAccessControlDomains> query = new SFApiQuery<SFAccessControlDomains>();
		query.setFrom("Accounts");
		query.setAction("FolderAccessControlDomains");
		query.setBody(accessControlDomains);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Update the Login Access Control List of domains
    * {
    * "AccessControlType" : "AllowedDomains",
    * "Domains": ["domainA", "domainB", ...]
    * }
	* Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified.
	* @param AccessControlType 	
	* @param Domains 	
	* @return The updated Login Access Control List of domains for the Account
    */
	public SFApiQuery<SFAccessControlDomains> updateLoginAccessControlDomains(SFAccessControlDomains accessControlDomains)
	{
		SFApiQuery<SFAccessControlDomains> query = new SFApiQuery<SFAccessControlDomains>();
		query.setFrom("Accounts");
		query.setAction("LoginAccessControlDomains");
		query.setBody(accessControlDomains);
		query.setHttpMethod("PATCH");
		return query;
	}

    /**
	* Update the Folder Access Control List of domains
    * {
    * "AccessControlType" : "AllowedDomains",
    * "Domains": ["domainA", "domainB", ...]
    * }
	* Merges the specified domains with existing domains in the list, and/or updates the AccessControlType. One of the parameters needs to be specified. It
	* allows to add new domains to the list.
	* @param AccessControlType 	
	* @param Domains 	
	* @return The updated Folder Access Control List of domains for the Account
    */
	public SFApiQuery<SFAccessControlDomains> updateFolderAccessControlDomains(SFAccessControlDomains accessControlDomains)
	{
		SFApiQuery<SFAccessControlDomains> query = new SFApiQuery<SFAccessControlDomains>();
		query.setFrom("Accounts");
		query.setAction("FolderAccessControlDomains");
		query.setBody(accessControlDomains);
		query.setHttpMethod("PATCH");
		return query;
	}

    /**
	* Delete domains from the Logins Access Control List of domains
    * {
    * "AccessControlType" : "AllowedDomains",
    * "Domains": ["domainA", "domainB", ...]
    * }
	* Deletes the specified domains from the list.
	* @param AccessControlType 	
	* @param Domains 	
	* @return No content
    */
	public SFApiQuery deleteLoginAccessControlDomains(SFAccessControlDomains accessControlDomains)
	{
		SFApiQuery query = new SFApiQuery();
		query.setFrom("Accounts");
		query.setAction("LoginAccessControlDomains");
		query.setBody(accessControlDomains);
		query.setHttpMethod("DELETE");
		return query;
	}

    /**
	* Delete domains from the Folder Access Control List of domains
    * {
    * "AccessControlType" : "AllowedDomains",
    * "Domains": ["domainA", "domainB", ...]
    * }
	* Deletes the specified domains from the list.
	* @param AccessControlType 	
	* @param Domains 	
	* @return No content
    */
	public SFApiQuery deleteFolderAccessControlDomains(SFAccessControlDomains accessControlDomains)
	{
		SFApiQuery query = new SFApiQuery();
		query.setFrom("Accounts");
		query.setAction("FolderAccessControlDomains");
		query.setBody(accessControlDomains);
		query.setHttpMethod("DELETE");
		return query;
	}

    /**
	* Check if WebPop is required
	* @param subdomain 	
	* @param username 	
	* @param singlePlane 	
	* @return RequireWebPopResult
    */
	public SFApiQuery<SFRequireWebPopResult> requireWebPop(String subdomain, String username, Boolean singlePlane )
	{
		SFApiQuery<SFRequireWebPopResult> query = new SFApiQuery<SFRequireWebPopResult>();
		query.setFrom("Accounts");
		query.setAction("RequireWebPop");
		query.addQueryString("subdomain", subdomain);
		query.addQueryString("username", username);
		query.addQueryString("singlePlane", singlePlane);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Check if subdomain is required
	* @param username 	
	* @param singlePlane 	
	* @return RequireSubdomainResult
    */
	public SFApiQuery<SFRequireSubdomainResult> requireSubdomain(String username, Boolean singlePlane)
	{
		SFApiQuery<SFRequireSubdomainResult> query = new SFApiQuery<SFRequireSubdomainResult>();
		query.setFrom("Accounts");
		query.setAction("RequireSubdomain");
		query.addQueryString("username", username);
		query.addQueryString("singlePlane", singlePlane);
		query.setHttpMethod("GET");
		return query;
	}

    /**
	* Find Subdomain
    * {
    * "UsernameShort":"usernameShort",
    * "Password":"pass",
    * "EmployeeOnly":false
    * }
	* Find the user account information based on the short username
	* @param findSubdomainParams 	
	* @param singlePlane 	
	* @return FindSubdomainResult
    */
	public SFApiQuery<SFFindSubdomainResult> findSubdomain(SFFindSubdomainParams findSubdomainParams, Boolean singlePlane)
	{
		SFApiQuery<SFFindSubdomainResult> query = new SFApiQuery<SFFindSubdomainResult>();
		query.setFrom("Accounts");
		query.setAction("FindSubdomain");
		query.addQueryString("singlePlane", singlePlane);
		query.setBody(findSubdomainParams);
		query.setHttpMethod("POST");
		return query;
	}

    /**
	* Get SSO Info
	* @param subdomain 	
	* @return SSOInfo
    */
	public SFApiQuery<SFSSOInfo> getSSOInfo(String subdomain)
	{
		SFApiQuery<SFSSOInfo> query = new SFApiQuery<SFSSOInfo>();
		query.setFrom("Accounts");
		query.setAction("SSOInfo");
		query.addQueryString("subdomain", subdomain);
		query.setHttpMethod("GET");
		return query;
	}

}

