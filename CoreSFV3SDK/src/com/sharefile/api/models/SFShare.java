
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.models;

import java.io.InputStream;
import java.util.ArrayList;
import java.net.URI;
import java.util.Date;
import java.util.Map;
import java.util.HashMap;

import com.google.gson.annotations.SerializedName;
import com.sharefile.api.enumerations.SFSafeEnum;
import com.sharefile.api.models.*;

public class SFShare extends SFODataObject {

	@SerializedName("AliasID")
	private String AliasID;
	@SerializedName("ShareType")
	private SFSafeEnum<SFShareType> ShareType;
	@SerializedName("Title")
	private String Title;
	@SerializedName("HasSentMessage")
	private Boolean HasSentMessage;
	@SerializedName("SentMessageTitle")
	private String SentMessageTitle;
	@SerializedName("RequireLogin")
	private Boolean RequireLogin;
	@SerializedName("RequireUserInfo")
	private Boolean RequireUserInfo;
	@SerializedName("Parent")
	private SFItem Parent;
	@SerializedName("Creator")
	private SFUser Creator;
	@SerializedName("User")
	private SFUser User;
	@SerializedName("Items")
	private ArrayList<SFItem> Items;
	@SerializedName("CreationDate")
	private Date CreationDate;
	@SerializedName("ExpirationDate")
	private Date ExpirationDate;
	@SerializedName("MaxDownloads")
	private Integer MaxDownloads;
	@SerializedName("TotalDownloads")
	private Integer TotalDownloads;
	@SerializedName("IsViewOnly")
	private Boolean IsViewOnly;
	@SerializedName("TrackUntilDate")
	private Date TrackUntilDate;
	@SerializedName("SendFrequency")
	private Integer SendFrequency;
	@SerializedName("SendInterval")
	private Integer SendInterval;
	@SerializedName("LastDateSent")
	private Date LastDateSent;
	@SerializedName("IsConsumed")
	private Boolean IsConsumed;
	@SerializedName("IsRead")
	private Boolean IsRead;
	@SerializedName("IsArchived")
	private Boolean IsArchived;
	@SerializedName("SendTool")
	private String SendTool;
	@SerializedName("SendMethod")
	private String SendMethod;
	@SerializedName("UsesStreamIDs")
	private Boolean UsesStreamIDs;
	@SerializedName("Uri")
	private URI Uri;
	@SerializedName("Recipients")
	private ArrayList<SFShareAlias> Recipients;
	@SerializedName("Zone")
	private SFZone Zone;
	@SerializedName("Signature")
	private String Signature;

		/**
		* When a Share is sent to multiple users, with RequireLogin or RequireUserInfo set, then a different
		* Share Alias is created for each user. The email ShareFile sends to these users will contain different
		* AliasIDs, allowing ShareFile to track the user activity on the share.
		* For anonymous Shares, the AliasID will be the same as the Share ID.
		*/
	public String getAliasID() {
		return AliasID;
	}

		/**
		* When a Share is sent to multiple users, with RequireLogin or RequireUserInfo set, then a different
		* Share Alias is created for each user. The email ShareFile sends to these users will contain different
		* AliasIDs, allowing ShareFile to track the user activity on the share.
		* For anonymous Shares, the AliasID will be the same as the Share ID.
		*/
	public void setAliasID(String aliasid) {
		AliasID = aliasid;
	}
		/**
		* Either "Send" or "Request". Send Shares are used to Send files and folders to the specified users. Request
		* shares are used to allow users to upload files to the share owner chosen location.
		*/
	public SFSafeEnum<SFShareType> getShareType() {
		return ShareType;
	}

		/**
		* Either "Send" or "Request". Send Shares are used to Send files and folders to the specified users. Request
		* shares are used to allow users to upload files to the share owner chosen location.
		*/
	public void setShareType(SFSafeEnum<SFShareType> sharetype) {
		ShareType = sharetype;
	}
		/**
		* Share title
		*/
	public String getTitle() {
		return Title;
	}

		/**
		* Share title
		*/
	public void setTitle(String title) {
		Title = title;
	}
		/**
		* Flag to indicate if ShareFile has sent email messages for this Share
		*/
	public Boolean getHasSentMessage() {
		return HasSentMessage;
	}

		/**
		* Flag to indicate if ShareFile has sent email messages for this Share
		*/
	public void setHasSentMessage(Boolean hassentmessage) {
		HasSentMessage = hassentmessage;
	}
		/**
		* Subject of Share email message
		*/
	public String getSentMessageTitle() {
		return SentMessageTitle;
	}

		/**
		* Subject of Share email message
		*/
	public void setSentMessageTitle(String sentmessagetitle) {
		SentMessageTitle = sentmessagetitle;
	}
		/**
		* If set, only authenticated users can download files from this share.
		*/
	public Boolean getRequireLogin() {
		return RequireLogin;
	}

		/**
		* If set, only authenticated users can download files from this share.
		*/
	public void setRequireLogin(Boolean requirelogin) {
		RequireLogin = requirelogin;
	}
		/**
		* If set, users must provide Name, Email and Company information to download files from the share.
		*/
	public Boolean getRequireUserInfo() {
		return RequireUserInfo;
	}

		/**
		* If set, users must provide Name, Email and Company information to download files from the share.
		*/
	public void setRequireUserInfo(Boolean requireuserinfo) {
		RequireUserInfo = requireuserinfo;
	}
		/**
		* Folder location that contain the share files (Send); or the folder were files will be uploaded to
		* (Request).
		*/
	public SFItem getParent() {
		return Parent;
	}

		/**
		* Folder location that contain the share files (Send); or the folder were files will be uploaded to
		* (Request).
		*/
	public void setParent(SFItem parent) {
		Parent = parent;
	}
		/**
		* User that created this Share.
		*/
	public SFUser getCreator() {
		return Creator;
	}

		/**
		* User that created this Share.
		*/
	public void setCreator(SFUser creator) {
		Creator = creator;
	}
		/**
		* User given permission to use this share - used for Aliases.
		*/
	public SFUser getUser() {
		return User;
	}

		/**
		* User given permission to use this share - used for Aliases.
		*/
	public void setUser(SFUser user) {
		User = user;
	}
		/**
		* List of shared Items (for Send Shares only)
		*/
	public ArrayList<SFItem> getItems() {
		return Items;
	}

		/**
		* List of shared Items (for Send Shares only)
		*/
	public void setItems(ArrayList<SFItem> items) {
		Items = items;
	}
		/**
		* Date the share was created
		*/
	public Date getCreationDate() {
		return CreationDate;
	}

		/**
		* Date the share was created
		*/
	public void setCreationDate(Date creationdate) {
		CreationDate = creationdate;
	}
		/**
		* Date the share expires
		*/
	public Date getExpirationDate() {
		return ExpirationDate;
	}

		/**
		* Date the share expires
		*/
	public void setExpirationDate(Date expirationdate) {
		ExpirationDate = expirationdate;
	}
		/**
		* Maximum number of downloads each user can perform.
		*/
	public Integer getMaxDownloads() {
		return MaxDownloads;
	}

		/**
		* Maximum number of downloads each user can perform.
		*/
	public void setMaxDownloads(Integer maxdownloads) {
		MaxDownloads = maxdownloads;
	}
	public Integer getTotalDownloads() {
		return TotalDownloads;
	}

	public void setTotalDownloads(Integer totaldownloads) {
		TotalDownloads = totaldownloads;
	}
		/**
		* Used for Virtual Data Room accounts - indicates the files in the share can only be
		* downloaded with an applied watermark.
		*/
	public Boolean getIsViewOnly() {
		return IsViewOnly;
	}

		/**
		* Used for Virtual Data Room accounts - indicates the files in the share can only be
		* downloaded with an applied watermark.
		*/
	public void setIsViewOnly(Boolean isviewonly) {
		IsViewOnly = isviewonly;
	}
		/**
		* User activity on this share will be tracked up to this date.
		*/
	public Date getTrackUntilDate() {
		return TrackUntilDate;
	}

		/**
		* User activity on this share will be tracked up to this date.
		*/
	public void setTrackUntilDate(Date trackuntildate) {
		TrackUntilDate = trackuntildate;
	}
	public Integer getSendFrequency() {
		return SendFrequency;
	}

	public void setSendFrequency(Integer sendfrequency) {
		SendFrequency = sendfrequency;
	}
	public Integer getSendInterval() {
		return SendInterval;
	}

	public void setSendInterval(Integer sendinterval) {
		SendInterval = sendinterval;
	}
	public Date getLastDateSent() {
		return LastDateSent;
	}

	public void setLastDateSent(Date lastdatesent) {
		LastDateSent = lastdatesent;
	}
	public Boolean getIsConsumed() {
		return IsConsumed;
	}

	public void setIsConsumed(Boolean isconsumed) {
		IsConsumed = isconsumed;
	}
	public Boolean getIsRead() {
		return IsRead;
	}

	public void setIsRead(Boolean isread) {
		IsRead = isread;
	}
	public Boolean getIsArchived() {
		return IsArchived;
	}

	public void setIsArchived(Boolean isarchived) {
		IsArchived = isarchived;
	}
	public String getSendTool() {
		return SendTool;
	}

	public void setSendTool(String sendtool) {
		SendTool = sendtool;
	}
	public String getSendMethod() {
		return SendMethod;
	}

	public void setSendMethod(String sendmethod) {
		SendMethod = sendmethod;
	}
		/**
		* When enabled the items are identified by stream IDs instead of item IDs.
		* Applies to Send Shares only.
		*/
	public Boolean getUsesStreamIDs() {
		return UsesStreamIDs;
	}

		/**
		* When enabled the items are identified by stream IDs instead of item IDs.
		* Applies to Send Shares only.
		*/
	public void setUsesStreamIDs(Boolean usesstreamids) {
		UsesStreamIDs = usesstreamids;
	}
		/**
		* Uri to access the share through the Web portal
		*/
	public URI getUri() {
		return Uri;
	}

		/**
		* Uri to access the share through the Web portal
		*/
	public void setUri(URI uri) {
		Uri = uri;
	}
		/**
		* List of users that have access to this share.
		*/
	public ArrayList<SFShareAlias> getRecipients() {
		return Recipients;
	}

		/**
		* List of users that have access to this share.
		*/
	public void setRecipients(ArrayList<SFShareAlias> recipients) {
		Recipients = recipients;
	}
		/**
		* The Storage Zone that contains this Share.
		*/
	public SFZone getZone() {
		return Zone;
	}

		/**
		* The Storage Zone that contains this Share.
		*/
	public void setZone(SFZone zone) {
		Zone = zone;
	}
		/**
		* HMAC Signature for the Share data
		*/
	public String getSignature() {
		return Signature;
	}

		/**
		* HMAC Signature for the Share data
		*/
	public void setSignature(String signature) {
		Signature = signature;
	}

}