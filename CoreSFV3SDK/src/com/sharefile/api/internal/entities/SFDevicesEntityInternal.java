
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.internal.entities;

import com.sharefile.api.*;
import com.sharefile.api.entities.*;
import com.sharefile.api.models.*;
import com.sharefile.api.internal.models.*;
import com.sharefile.api.SFApiQuery;
import com.sharefile.api.interfaces.ISFQuery;


import java.io.InputStream;
import java.util.ArrayList;
import java.net.URI;
import java.util.Date;
 
import com.google.gson.annotations.SerializedName;
import com.sharefile.api.enumerations.SFSafeEnum;
import com.sharefile.api.enumerations.SFSafeEnumFlags;

public class SFDevicesEntityInternal extends SFODataEntityBase
{
	public SFDevicesEntityInternal(ISFApiClient client) {
		super(client);
	}

	/**
	* Get Device Users for Current User
	* @return A feed of DeviceUser objects
	*/
	public ISFQuery<SFODataFeed<SFDeviceUser>> get()	{

		SFApiQuery<SFODataFeed<SFDeviceUser>> sfApiQuery = new SFApiQuery<SFODataFeed<SFDeviceUser>>(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Get Device by ID
	* @param url 	 	
	* @return Device
	*/
	public ISFQuery<SFDevice> get(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery<SFDevice> sfApiQuery = new SFApiQuery<SFDevice>(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Get Devices for given User
	* @param parentUrl 	 	
	* @return List of Devices
	*/
	public ISFQuery<SFODataFeed<SFDeviceUser>> getByUser(URI parentUrl) throws InvalidOrMissingParameterException 	{
		if (parentUrl == null) {
			throw new InvalidOrMissingParameterException("parentUrl");
		}

		SFApiQuery<SFODataFeed<SFDeviceUser>> sfApiQuery = new SFApiQuery<SFODataFeed<SFDeviceUser>>(this.client);
		sfApiQuery.setFrom("Users");
		sfApiQuery.setAction("Devices");
		sfApiQuery.addIds(parentUrl);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Delete Device
	* @param url 	 	
	* @return no data on success
	*/
	public ISFQuery delete(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

	/**
	* Delete specific Device for given User
	* @param parentUrl 	 	
	* @param id  (default: )	 	
	* @return No content
	*/
	public ISFQuery deleteByUser(URI parentUrl, String id) throws InvalidOrMissingParameterException 	{
		if (parentUrl == null) {
			throw new InvalidOrMissingParameterException("parentUrl");
		}
		if (id == null) {
			throw new InvalidOrMissingParameterException("id");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("Users");
		sfApiQuery.setAction("Devices");
		sfApiQuery.addIds(parentUrl);
		sfApiQuery.addActionIds(id);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

	/**
	* Create Device for User
    * {
    * "Device":{"id":"deviceId"},
    * "FriendlyName":"fname",
    * "ToolRaw":"toolRaw",
    * "ToolVersion":"toolVersion"
    * }
	* @param parentUrl 	 	
	* @return Created Device
	*/
	public ISFQuery<SFDeviceUser> createByUser(URI parentUrl, SFDeviceUser du) throws InvalidOrMissingParameterException 	{
		if (parentUrl == null) {
			throw new InvalidOrMissingParameterException("parentUrl");
		}
		if (du == null) {
			throw new InvalidOrMissingParameterException("du");
		}

		SFApiQuery<SFDeviceUser> sfApiQuery = new SFApiQuery<SFDeviceUser>(this.client);
		sfApiQuery.setFrom("Users");
		sfApiQuery.setAction("Devices");
		sfApiQuery.addIds(parentUrl);
		sfApiQuery.setBody(du);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Wipe Device
	* @param deviceUrl 	 	
	* @param userid  (default: null)	 	
	* @return no data on success
	*/
	public ISFQuery wipe(URI deviceUrl, String userid) throws InvalidOrMissingParameterException 	{
		if (deviceUrl == null) {
			throw new InvalidOrMissingParameterException("deviceUrl");
		}
		if (userid == null) {
			throw new InvalidOrMissingParameterException("userid");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setAction("Wipe");
		sfApiQuery.addIds(deviceUrl);
		sfApiQuery.addQueryString("userid", userid);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Wipe Device
	* @param deviceUrl 	 	
	* @return no data on success
	*/
	public ISFQuery wipe(URI deviceUrl) throws InvalidOrMissingParameterException 	{
		if (deviceUrl == null) {
			throw new InvalidOrMissingParameterException("deviceUrl");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setAction("Wipe");
		sfApiQuery.addIds(deviceUrl);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Signal Wipe Done
    * {
    * "Logs" :
    * [
    * { "FileName":"fileA",
    * "FileID":"id",
    * "Timestamp":0,
    * "AccountID":"id",
    * "UserID":"userId1",
    * "Action":"OpenGeneric",
    * "AdditionalInfo":""
    * },
    * ...
    * ],
    * "WipeResults" :
    * [
    * {"id":"userId1", "WipeToken":"token1", "Success":"true", "ErrorMessage":"" },
    * {"id":"userId1", "WipeToken":"token2", "Success":"false", "ErrorMessage":"some error" },
    * ...
    * ]
    * }
	* Signal that a device wipe has been completed
	* @param deviceUrl 	 	
	* @param deviceWipeReport 	 	
	* @param singlePlane  (default: false)	 	
	* @return no data on success
	*/
	public ISFQuery wipeDone(URI deviceUrl, SFDeviceWipeReport deviceWipeReport, Boolean singlePlane) throws InvalidOrMissingParameterException 	{
		if (deviceUrl == null) {
			throw new InvalidOrMissingParameterException("deviceUrl");
		}
		if (deviceWipeReport == null) {
			throw new InvalidOrMissingParameterException("deviceWipeReport");
		}
		if (singlePlane == null) {
			throw new InvalidOrMissingParameterException("singlePlane");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setAction("WipeDone");
		sfApiQuery.addIds(deviceUrl);
		sfApiQuery.addQueryString("singlePlane", singlePlane);
		sfApiQuery.setBody(deviceWipeReport);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Signal Wipe Done
    * {
    * "Logs" :
    * [
    * { "FileName":"fileA",
    * "FileID":"id",
    * "Timestamp":0,
    * "AccountID":"id",
    * "UserID":"userId1",
    * "Action":"OpenGeneric",
    * "AdditionalInfo":""
    * },
    * ...
    * ],
    * "WipeResults" :
    * [
    * {"id":"userId1", "WipeToken":"token1", "Success":"true", "ErrorMessage":"" },
    * {"id":"userId1", "WipeToken":"token2", "Success":"false", "ErrorMessage":"some error" },
    * ...
    * ]
    * }
	* Signal that a device wipe has been completed
	* @param deviceUrl 	 	
	* @param deviceWipeReport 	 	
	* @return no data on success
	*/
	public ISFQuery wipeDone(URI deviceUrl, SFDeviceWipeReport deviceWipeReport) throws InvalidOrMissingParameterException 	{
		if (deviceUrl == null) {
			throw new InvalidOrMissingParameterException("deviceUrl");
		}
		if (deviceWipeReport == null) {
			throw new InvalidOrMissingParameterException("deviceWipeReport");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setAction("WipeDone");
		sfApiQuery.addIds(deviceUrl);
		sfApiQuery.setBody(deviceWipeReport);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Check Device Status
	* @param deviceUrl 	 	
	* @param singlePlane  (default: false)	 	
	* @return DeviceStatus
	*/
	public ISFQuery<SFDeviceStatus> status(URI deviceUrl, Boolean singlePlane) throws InvalidOrMissingParameterException 	{
		if (deviceUrl == null) {
			throw new InvalidOrMissingParameterException("deviceUrl");
		}
		if (singlePlane == null) {
			throw new InvalidOrMissingParameterException("singlePlane");
		}

		SFApiQuery<SFDeviceStatus> sfApiQuery = new SFApiQuery<SFDeviceStatus>(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setAction("Status");
		sfApiQuery.addIds(deviceUrl);
		sfApiQuery.addQueryString("singlePlane", singlePlane);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Check Device Status
	* @param deviceUrl 	 	
	* @return DeviceStatus
	*/
	public ISFQuery<SFDeviceStatus> status(URI deviceUrl) throws InvalidOrMissingParameterException 	{
		if (deviceUrl == null) {
			throw new InvalidOrMissingParameterException("deviceUrl");
		}

		SFApiQuery<SFDeviceStatus> sfApiQuery = new SFApiQuery<SFDeviceStatus>(this.client);
		sfApiQuery.setFrom("Devices");
		sfApiQuery.setAction("Status");
		sfApiQuery.addIds(deviceUrl);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

}

