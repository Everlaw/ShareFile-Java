
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.models;

import java.net.URI;

public class SFUploadSpecification extends SFODataObject {

	private SFUploadMethod Method;
	private URI PrepareUri;
	private URI ChunkUri;
	private URI FinishUri;
	private Boolean IsResume;
	private Long ResumeIndex;
	private Long ResumeOffset;
	private String ResumeFileHash;

		/**
		* The Upload method that must be used for this upload
		*/
	public SFUploadMethod getMethod() {
		return Method;
	}

		/**
		* The Upload method that must be used for this upload
		*/
	public void setMethod(SFUploadMethod method) {
		Method = method;
	}
		/**
		* If provided, clients must issue a request to this Uri before uploading any data.
		*/
	public URI getPrepareUri() {
		return PrepareUri;
	}

		/**
		* If provided, clients must issue a request to this Uri before uploading any data.
		*/
	public void setPrepareUri(URI prepareuri) {
		PrepareUri = prepareuri;
	}
		/**
		* Specifies the URI the client must send the file data to
		*/
	public URI getChunkUri() {
		return ChunkUri;
	}

		/**
		* Specifies the URI the client must send the file data to
		*/
	public void setChunkUri(URI chunkuri) {
		ChunkUri = chunkuri;
	}
		/**
		* If provided, specifies the final call the client must perform to finish the upload process
		*/
	public URI getFinishUri() {
		return FinishUri;
	}

		/**
		* If provided, specifies the final call the client must perform to finish the upload process
		*/
	public void setFinishUri(URI finishuri) {
		FinishUri = finishuri;
	}
		/**
		* Specifies a Resumable upload is supproted.
		*/
	public Boolean getIsResume() {
		return IsResume;
	}

		/**
		* Specifies a Resumable upload is supproted.
		*/
	public void setIsResume(Boolean isresume) {
		IsResume = isresume;
	}
		/**
		* Specifies the initial index for resuming, if IsResume is true.
		*/
	public Long getResumeIndex() {
		return ResumeIndex;
	}

		/**
		* Specifies the initial index for resuming, if IsResume is true.
		*/
	public void setResumeIndex(Long resumeindex) {
		ResumeIndex = resumeindex;
	}
		/**
		* Specifies the initial file offset by bytes, if IsResume is true
		*/
	public Long getResumeOffset() {
		return ResumeOffset;
	}

		/**
		* Specifies the initial file offset by bytes, if IsResume is true
		*/
	public void setResumeOffset(Long resumeoffset) {
		ResumeOffset = resumeoffset;
	}
		/**
		* Specifies the MD5 hash of the first ResumeOffset bytes of the partial file found at the server
		*/
	public String getResumeFileHash() {
		return ResumeFileHash;
	}

		/**
		* Specifies the MD5 hash of the first ResumeOffset bytes of the partial file found at the server
		*/
	public void setResumeFileHash(String resumefilehash) {
		ResumeFileHash = resumefilehash;
	}
}