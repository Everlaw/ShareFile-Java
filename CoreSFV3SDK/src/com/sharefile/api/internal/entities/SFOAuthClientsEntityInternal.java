
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2015 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.internal.entities;

import com.sharefile.api.entities.*;
import com.sharefile.api.exceptions.InvalidOrMissingParameterException;
import com.sharefile.api.interfaces.ISFApiClient;
import com.sharefile.api.internal.models.SFAppCodes;
import com.sharefile.api.internal.models.SFOAuthClient;
import com.sharefile.api.models.*;
import com.sharefile.api.internal.models.*;
import com.sharefile.api.SFApiQuery;
import com.sharefile.api.interfaces.ISFQuery;


import java.net.URI;

import com.sharefile.api.enumerations.SFSafeEnum;

public class SFOAuthClientsEntityInternal extends SFODataEntityBase
{
	public SFOAuthClientsEntityInternal(ISFApiClient client) {
		super(client);
	}

	/**
	* Get List of OAuthClients for the Current Account
	* @return List of OAuthClients
	*/
	public ISFQuery<SFODataFeed<SFOAuthClient>> get()	{

		SFApiQuery<SFODataFeed<SFOAuthClient>> sfApiQuery = new SFApiQuery<SFODataFeed<SFOAuthClient>>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Get OAuthClient
	* @param url 	 	
	* @return a single OAuthClient
	*/
	public ISFQuery<SFOAuthClient> get(URI url) throws InvalidOrMissingParameterException {
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery<SFOAuthClient> sfApiQuery = new SFApiQuery<SFOAuthClient>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Get List of OAuthClients for the Specified Account
	* @param accountId 	 	
	* @return List of OAuthClients
	*/
	public ISFQuery<SFODataFeed<SFOAuthClient>> byAccount(String accountId) throws InvalidOrMissingParameterException 	{
		if (accountId == null) {
			throw new InvalidOrMissingParameterException("accountId");
		}

		SFApiQuery<SFODataFeed<SFOAuthClient>> sfApiQuery = new SFApiQuery<SFODataFeed<SFOAuthClient>>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.setAction("ByAccount");
		sfApiQuery.addQueryString("accountId", accountId);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

	/**
	* Create OAuthClient
    * {
    * "Name":"App Name",
    * "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
    * "ToolUrl":"https:///toolUrl"
    * }
	* @param oauthClient 	 	
	* @return created OAuthClient
	*/
	public ISFQuery<SFOAuthClient> create(SFOAuthClient oauthClient, Boolean singlePlane) throws InvalidOrMissingParameterException 	{
		if (oauthClient == null) {
			throw new InvalidOrMissingParameterException("oauthClient");
		}
		if (singlePlane == null) {
			throw new InvalidOrMissingParameterException("singlePlane");
		}

		SFApiQuery<SFOAuthClient> sfApiQuery = new SFApiQuery<SFOAuthClient>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.addQueryString("singlePlane", singlePlane);
		sfApiQuery.setBody(oauthClient);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Create OAuthClient
    * {
    * "Name":"App Name",
    * "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
    * "ToolUrl":"https:///toolUrl"
    * }
	* @param oauthClient 	 	
	* @return created OAuthClient
	*/
	public ISFQuery<SFOAuthClient> create(SFOAuthClient oauthClient) throws InvalidOrMissingParameterException 	{
		if (oauthClient == null) {
			throw new InvalidOrMissingParameterException("oauthClient");
		}

		SFApiQuery<SFOAuthClient> sfApiQuery = new SFApiQuery<SFOAuthClient>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.setBody(oauthClient);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

	/**
	* Update OAuthClient
    * {
    * "State":"Revoked",
    * "Name":"Updated App Name",
    * "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
    * "ToolUrl":"https:///toolUrl"
    * }
	* @param url 	 	
	* @return updated OAuthClient
	*/
	public ISFQuery<SFOAuthClient> update(URI url, SFOAuthClient oauthClient, Boolean singlePlane) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (oauthClient == null) {
			throw new InvalidOrMissingParameterException("oauthClient");
		}
		if (singlePlane == null) {
			throw new InvalidOrMissingParameterException("singlePlane");
		}

		SFApiQuery<SFOAuthClient> sfApiQuery = new SFApiQuery<SFOAuthClient>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("singlePlane", singlePlane);
		sfApiQuery.setBody(oauthClient);
		sfApiQuery.setHttpMethod("PATCH");
		return sfApiQuery;
	}

	/**
	* Update OAuthClient
    * {
    * "State":"Revoked",
    * "Name":"Updated App Name",
    * "RedirectUrls":["https:///redirectUrl1", "https:///redirectUrl2"],
    * "ToolUrl":"https:///toolUrl"
    * }
	* @param url 	 	
	* @return updated OAuthClient
	*/
	public ISFQuery<SFOAuthClient> update(URI url, SFOAuthClient oauthClient) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (oauthClient == null) {
			throw new InvalidOrMissingParameterException("oauthClient");
		}

		SFApiQuery<SFOAuthClient> sfApiQuery = new SFApiQuery<SFOAuthClient>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.addIds(url);
		sfApiQuery.setBody(oauthClient);
		sfApiQuery.setHttpMethod("PATCH");
		return sfApiQuery;
	}

	/**
	* Delete OAuthClient
	* @return no data
	*/
	public ISFQuery delete(URI url, Boolean singlePlane) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}
		if (singlePlane == null) {
			throw new InvalidOrMissingParameterException("singlePlane");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.addIds(url);
		sfApiQuery.addQueryString("singlePlane", singlePlane);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

	/**
	* Delete OAuthClient
	* @return no data
	*/
	public ISFQuery delete(URI url) throws InvalidOrMissingParameterException 	{
		if (url == null) {
			throw new InvalidOrMissingParameterException("url");
		}

		SFApiQuery sfApiQuery = new SFApiQuery(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.addIds(url);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

	/**
	* get an OAuth code to be used to exchange for a OAuth token
	* @param appCode 	 	
	* @return OAuth code
	*/
	public ISFQuery<SFOAuthCode> getOAuthCode(SFSafeEnum<SFAppCodes> appCode) throws InvalidOrMissingParameterException 	{
		if (appCode == null) {
			throw new InvalidOrMissingParameterException("appCode");
		}

		SFApiQuery<SFOAuthCode> sfApiQuery = new SFApiQuery<SFOAuthCode>(this.apiClient);
		sfApiQuery.setFrom("OAuthClients");
		sfApiQuery.setAction("GetOAuthCode");
		sfApiQuery.addQueryString("appCode", appCode);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

}

