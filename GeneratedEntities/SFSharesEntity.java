
// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     
//	   Copyright (c) 2014 Citrix ShareFile. All rights reserved.
// </auto-generated>
// ------------------------------------------------------------------------------

package com.sharefile.api.entities;


import java.util.stream;

public class SFSharesEntity extends SFODataEntityBase
{
    /**
	* Get List of Shares
	* Retrieve all outstanding Shares of the authenticated user
	* @return List of Shares created by the authenticated user
    */
	public SFApiQuery<SFODataFeed<SFShare>> get()
	{
		SFApiQuery<SFODataFeed<SFShare>> sfApiQuery = new SFApiQuery<SFODataFeed<SFShare>>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

    /**
	* Get Share
	* Retrieve a single Share entity. If the Share allows anonymous access, then this method will not
	* require authentication.
	* @param id 	
	* @return A single Share
    */
	public SFApiQuery<SFShare> get(String id)
	{
		SFApiQuery<SFShare> sfApiQuery = new SFApiQuery<SFShare>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.addIds(id);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

    /**
	* Get Recipients of a Share
	* Retrieve the list of Recipients in the share. Recipients represent the target users of the Share, containing
	* access information, such as number of times that user downloaded files from the share. Each Recipient is
	* identified by an Alias, which is an unique ID given to each user - allowing tracking of downloads for
	* non-authenticated users.
	* @param id 	
	* @return A feed of Share Aliases representing recipients of the Share
    */
	public SFApiQuery<SFODataFeed<SFShareAlias>> getRecipients(String id)
	{
		SFApiQuery<SFODataFeed<SFShareAlias>> sfApiQuery = new SFApiQuery<SFODataFeed<SFShareAlias>>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Recipients");
		sfApiQuery.addIds(id);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

    /**
	* Get Items of a Share
	* Retrieve the list of Items (files and folders) in the Share.
	* @param id 	
	* @return A feed of Items of the Share
    */
	public SFApiQuery<SFODataFeed<SFItem>> getItems(String id)
	{
		SFApiQuery<SFODataFeed<SFItem>> sfApiQuery = new SFApiQuery<SFODataFeed<SFItem>>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Items");
		sfApiQuery.addIds(id);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

    /**
	* Get Recipients of a Share
	* Retrieve a single Item in the Share
	* @param shareid 	
	* @param itemid 	
	* @return An item in the Share
    */
	public SFApiQuery<SFItem> getItems(String shareid, String itemid)
	{
		SFApiQuery<SFItem> sfApiQuery = new SFApiQuery<SFItem>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Items");
		sfApiQuery.addIds(shareid);
		sfApiQuery.addActionIds(itemid);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

    /**
	* Downloads Share Items
	* Downloads items from the Share. The default action will download all Items in the Share.
	* If a Share has a single item, the download attachment name
	* will use the item name. Otherwise, the download will contain a ZIP archive containing all
	* files and folders in the share, named Files.zip.To download Shares that require authentication, make sure this request is authenticated. To download
	* shares that require require user information, provide the Name, Email and Company parameters in the URI
	* query. Anyone can download files from anonymous shares.You can also download individual Items in the Share. Use the Share(id)/Items(id)/Download action. The
	* item ID must be a top-level item in the Share - i.e., you cannot download or address files contained inside
	* a shared folder.
	* @param id 	
	* @param Name 	
	* @param Email 	
	* @param Company 	
	* @return Redirects the caller (302) to the download address for the share contents.
    */
	public SFApiQuery<Stream> download(String id, String grandparentid, String Name = null, String Email = null, String Company = null)
	{
		SFApiQuery<Stream> sfApiQuery = new SFApiQuery<Stream>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Download");
		sfApiQuery.addIds(id);
		sfApiQuery.addQueryString("grandparentid", grandparentid);
		sfApiQuery.addQueryString("Name", Name);
		sfApiQuery.addQueryString("Email", Email);
		sfApiQuery.addQueryString("Company", Company);
		sfApiQuery.setHttpMethod("GET");
		return sfApiQuery;
	}

    /**
	* Create Share
    * {
    * "ShareType":"Send",
    * "Title":"Sample Send Share",
    * "Items": [ { "Id":"itemid" }, {...} ],
    * "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
    * "ExpirationDate": "2013-07-23",
    * "RequireLogin": false,
    * "RequireUserInfo": false,
    * "MaxDownloads": -1,
    * "UsesStreamIDs": false
    * }
    * {
    * "ShareType":"Request",
    * "Title":"Sample Request Share",
    * "Recipients":[ { "User": { "Id":"userid" } }, { "User": { "Email": "user@email" } } ],
    * "Parent": { "Id":"folderid" },
    * "ExpirationDate": "2013-07-23",
    * "RequireLogin": false,
    * "RequireUserInfo": false,
    * "TrackUntilDate": "2013-07-23",
    * "SendFrequency": -1,
    * "SendInterval": -1
    * }
	* Creates a new Send or Request Share.
	* Expiration date:
	* - if not specified the default is 30 days
	* - "9999-12-31" disables share expiration.
	* To use stream IDs as item IDs UsesStreamIDs needs to be set to true, and all the IDs in Items need to be specified
	* as stream IDs.
	* @param share 	
	* @param notify 	
	* @return The new Share
    */
	public SFApiQuery<SFShare> create(SFShare share, Boolean notify = false)
	{
		SFApiQuery<SFShare> sfApiQuery = new SFApiQuery<SFShare>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.addQueryString("notify", notify);
		sfApiQuery.setBody(share);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

    /**
	* Modify Share
    * {
    * "Title": "New Title",
    * "ExpirationDate": "2013-07-23",
    * "RequireLogin": false,
    * "Items": [ { "Id":"itemid" }, {...} ],
    * }
	* Modifies an existing Share. If Items are specified they are added to the share.
	* @param id 	
	* @param share 	
	* @return The modified Share
    */
	public SFApiQuery<SFShare> update(String id, SFShare share)
	{
		SFApiQuery<SFShare> sfApiQuery = new SFApiQuery<SFShare>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.addIds(id);
		sfApiQuery.setBody(share);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

    /**
	* Delete Share
	* Removes an existing Share
	* @param id 	
    */
	public SFApiQuery delete(String id)
	{
		SFApiQuery sfApiQuery = new SFApiQuery();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.addIds(id);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

    /**
	* Create Share Alias
	* Creates a share alias for the specified share ID and user email. If a user with the given email address does not
	* exist it is created first.
	* For shares requiring login an activation email is sent to the created user. If 'notify' is enabled, the user activation is
	* included in the share notification email.
	* @param id 	
	* @param email 	
	* @param notify 	
	* @return Share with the AliasID property set to the created alias ID
    */
	public SFApiQuery<SFShare> createAlias(String id, String email, Boolean notify = false)
	{
		SFApiQuery<SFShare> sfApiQuery = new SFApiQuery<SFShare>();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Alias");
		sfApiQuery.addIds(id);
		sfApiQuery.addQueryString("email", email);
		sfApiQuery.addQueryString("notify", notify);
		sfApiQuery.setHttpMethod("DELETE");
		return sfApiQuery;
	}

    /**
	* Deliver Send a File Email
	* Sends an Email to the specified list of addresses, containing a link to the specified Items.
	* The default number of expiration days is 30. -1 disables share expiration.
	* @param parameters 	
    */
	public SFApiQuery createSend(SFShareSendParams parameters)
	{
		SFApiQuery sfApiQuery = new SFApiQuery();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Send");
		sfApiQuery.setBody(parameters);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

    /**
	* Deliver Request a File Email
	* Sends an Email to the specified list of addresses, containing a link to files upload.
	* The default number of expiration days is 30. -1 disables share expiration.
	* @param parameters 	
    */
	public SFApiQuery createRequest(SFShareRequestParams parameters)
	{
		SFApiQuery sfApiQuery = new SFApiQuery();
		sfApiQuery.setFrom("Shares");
		sfApiQuery.setAction("Request");
		sfApiQuery.setBody(parameters);
		sfApiQuery.setHttpMethod("POST");
		return sfApiQuery;
	}

}

